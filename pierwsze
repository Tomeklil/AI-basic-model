import  tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train.astype("float32")/255.0 
x_test = x_test.astype("float32")/255.0

x_train = x_train.reshape(-1, 28*28)
x_test = x_test.reshape(-1, 28*28)

y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy']
              )

history = model.fit(x_train, y_train, epochs=6, validation_split=0.2, batch_size=256)

model.evaluate(x_test, y_test)

plt.figure(figsize=(5,5))
for i in range(4):
    plt.subplot(2,2,i+1)
    plt.imshow(x_test[i].reshape(28,28), cmap='gray')
    plt.title(f"Label: {np.argmax(y_test[i])}")
plt.show()
plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
plt.plot(history.history['loss'], label=['Loss'])
plt.plot(history.history['val_loss'], label=['Val Loss'])
plt.legend()
plt.subplot(1,2,2)
plt.plot(history.history['accuracy'], label=['Accuracy'])
plt.plot(history.history['val_accuracy'], label=['Val Accuracy'])
plt.legend()
plt.show()

